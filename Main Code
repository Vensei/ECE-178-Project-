#include "altera_up_avalon_video_pixel_buffer_dma.h"
#include "altera_up_avalon_character_lcd.h"
#include "altera_up_avalon_video_dma_controller.h"
#include "sys/alt_stdio.h"
#include "sys/alt_irq.h"
#include "system.h"
#include <altera_avalon_jtag_uart_regs.h>
#include <altera_avalon_jtag_uart.h>
#include <unistd.h>
#include <stdlib.h>
#include <io.h>
#include <altera_avalon_pio_regs.h>
#include <string.h>


volatile char edge_capture;
alt_up_pixel_buffer_dma_dev *pixel_buffer_dev;
alt_up_video_dma_dev *char_buffer_dev;
int x0;
int x1;
int y0;
int y1;
int n = 0;
volatile char* a;
alt_u16 TO;

int array_x0[10]={240,43,134,300,180,16,200,80,128,52};
int array_x1[10]={243,46,137,303,183,19,203,83,131,55};
int array_y0[10]={50,64,189,134,220,20,110,194,82,170};
int array_y1[10]={54,68,193,138,224,24,114,198,86,174};

///Starting position of snake body/////
void snakeStart(){
	x0 = 156;
	x1 = 159;
	y0 = 116;
	y1 = 120;
}
/*//////////////////////////////////////////////////////////////////////////////

Functions that control the MOVEMENT WIN, LOSE, & SCORE effects

///////////////////////////////////////////////////////////////////////////////*/

void moveSnake(){
	pixel_buffer_dev = alt_up_pixel_buffer_dma_open_dev ("/dev/VGA_Subsystem_VGA_Pixel_DMA");
	alt_up_pixel_buffer_dma_draw_box (pixel_buffer_dev, 5 * 4, 5 * 4, 75 * 4-1, 55 * 4-1, 0xFFFF, 0);
	alt_up_pixel_buffer_dma_draw_box (pixel_buffer_dev, x0, y0, x1, y1, 0x0, 0);
	alt_up_pixel_buffer_dma_draw_box (pixel_buffer_dev, array_x0[n], array_y0[n], array_x1[n], array_y1[n], 0xF000, 0);
}
void WIN(){
	char text_top_row[40] = "WINNER\0";
	char text_bottom_row[40] = "Press Space To Reset\0";
		char_buffer_dev = alt_up_video_dma_open_dev ("/dev/VGA_Subsystem_Char_Buf_Subsystem_Char_Buf_DMA");
		pixel_buffer_dev = alt_up_pixel_buffer_dma_open_dev ("/dev/VGA_Subsystem_VGA_Pixel_DMA");
		alt_up_pixel_buffer_dma_clear_screen (pixel_buffer_dev, 0);
		alt_up_video_dma_screen_clear(char_buffer_dev,0);
		alt_up_pixel_buffer_dma_draw_box (pixel_buffer_dev, 1 * 4, 1 * 4, 79 * 4-1, 59 * 4-1, 0x0FA0, 0);
		alt_up_video_dma_draw_string (char_buffer_dev, text_top_row, 35, 29,0);
		alt_up_video_dma_draw_string (char_buffer_dev, text_bottom_row, 35, 30,0);
	*a = 'f';
}

void FAIL(){
	char text_top_row[40] = "FAIL\0";
				char text_bottom_row[40] = "Press Space To Reset\0";
				char_buffer_dev = alt_up_video_dma_open_dev ("/dev/VGA_Subsystem_Char_Buf_Subsystem_Char_Buf_DMA");
				alt_up_video_dma_screen_clear(char_buffer_dev,0);
				pixel_buffer_dev = alt_up_pixel_buffer_dma_open_dev ("/dev/VGA_Subsystem_VGA_Pixel_DMA");
				alt_up_pixel_buffer_dma_draw_box (pixel_buffer_dev, 1 * 4, 1 * 4, 79 * 4-1, 59 * 4-1, 0xF000, 0);
				alt_up_video_dma_draw_string (char_buffer_dev, text_top_row, 35, 29,0);
				alt_up_video_dma_draw_string (char_buffer_dev, text_bottom_row, 35, 30,0);
			*a = 'f';
}

void scoreOne(){
	char text_top_row[40] = "Score:\0";
	char text_bottom_row[40] = "1\0";
	char_buffer_dev = alt_up_video_dma_open_dev ("/dev/VGA_Subsystem_Char_Buf_Subsystem_Char_Buf_DMA");
	alt_up_video_dma_screen_clear(char_buffer_dev,0);
	alt_up_video_dma_draw_string (char_buffer_dev, text_top_row, 1, 1,0);
	alt_up_video_dma_draw_string (char_buffer_dev, text_bottom_row, 1, 3,0);

}

void scoreTwo(){
	char text_top_row[40] = "Score:\0";
	char text_bottom_row[40] = "2\0";
	char_buffer_dev = alt_up_video_dma_open_dev ("/dev/VGA_Subsystem_Char_Buf_Subsystem_Char_Buf_DMA");
	alt_up_video_dma_screen_clear(char_buffer_dev,0);
	alt_up_video_dma_draw_string (char_buffer_dev, text_top_row, 1, 1,0);
	alt_up_video_dma_draw_string (char_buffer_dev, text_bottom_row, 1, 3,0);

}

void scoreThree(){
	char text_top_row[40] = "Score:\0";
	char text_bottom_row[40] = "3\0";
	char_buffer_dev = alt_up_video_dma_open_dev ("/dev/VGA_Subsystem_Char_Buf_Subsystem_Char_Buf_DMA");
	alt_up_video_dma_screen_clear(char_buffer_dev,0);
	alt_up_video_dma_draw_string (char_buffer_dev, text_top_row, 1, 1,0);
	alt_up_video_dma_draw_string (char_buffer_dev, text_bottom_row, 1, 3,0);

}
/*//////////////////////////////////////////////////////////////////////////////

Functions that control the collision results

///////////////////////////////////////////////////////////////////////////////*/

void snakeCollisionLeft(){
	n++;
	if(n==1){
		scoreOne();
	}
	if(n==2){
		scoreTwo();
	}
}
void snakeCollisionRight(){
	n++;
	if(n==1){
		scoreOne();
	}
	if(n==2){
		scoreTwo();
	}
}
void snakeCollisionUp(){
	n++;
	if(n==1){
		scoreOne();
	}
	if(n==2){
		scoreTwo();
	}
}
void snakeCollisionDown(){
	n++;
	if(n==1){
		scoreOne();
	}
	if(n==2){
		scoreTwo();
	}
}
/*//////////////////////////////////////////////////////////////////////////////

Functions that control the direction & movement of the snake head

///////////////////////////////////////////////////////////////////////////////*/
void snakeRight(){
	x0 = x0+1;
	x1 = x1+1;
	if(x1>=301){
		FAIL();
		return;
	}

	if(x0==array_x0[n] && x1==array_x1[n] && y0==array_y0[n] && y1==array_y1[n]){
			snakeCollisionRight();
			if(n==3){
				WIN();
				return;
			}
	}
	moveSnake();
}
void snakeLeft(){
	x0 = x0-1;
	x1 = x1-1;
	if(x0<=19){
			FAIL();
			return;
		}

	if(x0==array_x0[n] && x1==array_x1[n] && y0==array_y0[n] && y1==array_y1[n]){
		snakeCollisionLeft();
		if(n==3){
			WIN();
			return;
		}
	}
	moveSnake();
}
void snakeUp(){
	y0 = y0-1;
	y1 = y1-1;
	if(y0<=19){
		FAIL();
		return;
	}
		if(x0==array_x0[n] && x1==array_x1[n] && y0==array_y0[n] && y1==array_y1[n]){
			snakeCollisionUp();
			if(n==3){
				WIN();
			return;
				}
			}
	moveSnake();
}
void snakeDown(){
	y0 = y0+1;
	y1 = y1+1;
	if(y1>=221){
			FAIL();
			return;
	}
		if(x0==array_x0[n] && x1==array_x1[n] && y0==array_y0[n] && y1==array_y1[n]){
				snakeCollisionDown();
				if(n==3){
					WIN();
					return;
			}
		}
	moveSnake();
}


/*//////////////////////////////////////////////////////////////////////////////

JTAG intrface for keyboard interactions

///////////////////////////////////////////////////////////////////////////////*/


void jtag_isr(void* context){

	volatile char* edge_ptr=(volatile char*)context;
	*edge_ptr = IORD_32DIRECT(JTAG_UART_BASE,0);
	if(*edge_ptr ==' ')
			{
		char text_top_row[40] = "Score:";
		char text_bottom_row[40] = "0\0";
		char_buffer_dev = alt_up_video_dma_open_dev ("/dev/VGA_Subsystem_Char_Buf_Subsystem_Char_Buf_DMA");
		alt_up_video_dma_screen_clear(char_buffer_dev,0);
		snakeStart();
		pixel_buffer_dev = alt_up_pixel_buffer_dma_open_dev ("/dev/VGA_Subsystem_VGA_Pixel_DMA");
		alt_up_pixel_buffer_dma_clear_screen (pixel_buffer_dev, 0);
		alt_up_pixel_buffer_dma_draw_box (pixel_buffer_dev, 5 * 4, 5 * 4, 75 * 4-1, 55 * 4-1, 0xFFFF, 0);
		alt_up_pixel_buffer_dma_draw_box (pixel_buffer_dev, x0, y0, x1, y1, 0x0, 0);
		alt_up_pixel_buffer_dma_draw_box (pixel_buffer_dev, array_x0[0], array_y0[0], array_x1[0], array_y1[0], 0xF000, 0);
		alt_up_video_dma_draw_string (char_buffer_dev, text_top_row, 1, 1,0);
		alt_up_video_dma_draw_string (char_buffer_dev, text_bottom_row, 1, 3,0);
			}
	if(*edge_ptr =='w')
			{
		*a = *edge_ptr;
			}
	if(*edge_ptr =='a')
			{
		*a = *edge_ptr;
			}
	if(*edge_ptr =='s')
			{
		*a = *edge_ptr;
			}
	if(*edge_ptr =='d')
			{
		*a = *edge_ptr;
			}

	IOWR_ALTERA_AVALON_JTAG_UART_DATA(JTAG_UART_BASE, 0x0);
	return;
}

/*//////////////////////////////////////////////////////////////////////////////

Interrupt and Timer Settings

///////////////////////////////////////////////////////////////////////////////*/

static void pio_init(){
	IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(JTAG_UART_BASE, 0x1);
	void* edge_ptr = (void*)&edge_capture;
	alt_irq_register(JTAG_UART_IRQ,edge_ptr,jtag_isr);	//set up entire ISR, handles the key id and executes isr on neg edge capture
}
static void timer_init(){
	IOWR_32DIRECT(INTERVAL_TIMER_BASE,8,0x25A0);
	IOWR_32DIRECT(INTERVAL_TIMER_BASE,12,0x0046);
	IOWR_32DIRECT(INTERVAL_TIMER_BASE,0,0x0);
	IOWR_32DIRECT(INTERVAL_TIMER_BASE,4,0x8);
	IOWR_32DIRECT(INTERVAL_TIMER_BASE,4,0x6);
}

/*//////////////////////////////////////////////////////////////////////////////

Game Menu

///////////////////////////////////////////////////////////////////////////////*/

void gameMenu(){
	char text_top_row[40] = "PIXEL PERFECT\0";
	char text_bottom_row[40] = "Ryan J & Paris V\0";

		char_buffer_dev = alt_up_video_dma_open_dev ("/dev/VGA_Subsystem_Char_Buf_Subsystem_Char_Buf_DMA");
			if (char_buffer_dev == NULL)
			{
				alt_printf ("Error: could not open character buffer device\n");
				return -1;
			}
			else
				alt_printf ("Opened character buffer device\n");
			alt_up_video_dma_screen_clear(char_buffer_dev,0);
			alt_up_video_dma_draw_string (char_buffer_dev, text_top_row, 35, 29,0);
			alt_up_video_dma_draw_string (char_buffer_dev, text_bottom_row, 35, 30,0);


		/* open the pixel buffer */
		pixel_buffer_dev = alt_up_pixel_buffer_dma_open_dev ("/dev/VGA_Subsystem_VGA_Pixel_DMA");
		if (pixel_buffer_dev == NULL)
		{
			alt_printf ("Error: could not open pixel buffer device\n");
			return -1;
		}
		else
			alt_printf ("Opened pixel buffer device\n");

			alt_up_pixel_buffer_dma_clear_screen (pixel_buffer_dev, 0);
			/* draw a medium-blue box in the middle of the screen, using character buffer coordinates.
			 * Use character coord * 4 since characters are 4 x 4 pixel buffer coords (8 x 8 VGA coords) */
			alt_up_pixel_buffer_dma_draw_box (pixel_buffer_dev, 1 * 4, 1 * 4, 79 * 4-1, 59 * 4-1, 0x0000, 0);
												/*	x1     y1      x2      y2      inner  outer*/
}

/*//////////////////////////////////////////////////////////////////////////////

Main Program

///////////////////////////////////////////////////////////////////////////////*/

int main(void)
{
	pio_init(); //set up keyboard inputs
	timer_init();
	gameMenu();

while(1){
			if(*a == 'w'){
				TO = (0x1 & IORD_32DIRECT(INTERVAL_TIMER_BASE,0));
				IOWR_32DIRECT(INTERVAL_TIMER_BASE,4,0x6);
				while(TO!= 1){
				TO = (0x1 & IORD_32DIRECT(INTERVAL_TIMER_BASE,0));
				}
					snakeUp();
					IOWR_32DIRECT(INTERVAL_TIMER_BASE,0,0x0);
				}
			if(*a == 'a'){
					TO = (0x1 & IORD_32DIRECT(INTERVAL_TIMER_BASE,0));
					IOWR_32DIRECT(INTERVAL_TIMER_BASE,4,0x6);
					while(TO!= 1){
					TO = (0x1 & IORD_32DIRECT(INTERVAL_TIMER_BASE,0));
					}
						snakeLeft();
						IOWR_32DIRECT(INTERVAL_TIMER_BASE,0,0x0);
							}
			if(*a == 's'){
					TO = (0x1 & IORD_32DIRECT(INTERVAL_TIMER_BASE,0));
				IOWR_32DIRECT(INTERVAL_TIMER_BASE,4,0x6);
				while(TO!= 1){
					TO = (0x1 & IORD_32DIRECT(INTERVAL_TIMER_BASE,0));
					}
					snakeDown();
					IOWR_32DIRECT(INTERVAL_TIMER_BASE,0,0x0);
					}
			if(*a == 'd'){
					TO = (0x1 & IORD_32DIRECT(INTERVAL_TIMER_BASE,0));
					IOWR_32DIRECT(INTERVAL_TIMER_BASE,4,0x6);
					while(TO!= 1){
					TO = (0x1 & IORD_32DIRECT(INTERVAL_TIMER_BASE,0));
					}
						snakeRight();
						IOWR_32DIRECT(INTERVAL_TIMER_BASE,0,0x0);
					}
}
}
